@startuml
enum GameState {
    wait,
    move,
}
enum TileKind {
    Breakable,
    Blank,
    Normal,
}
class TileType {
    + x : int
    + y : int
    + tileKind : TileKind
}
class Board {
    + currentState : GameState
    + width : int
    + height : int
    + offSet : int
    + tilePrefab : GameObject
    + breakableTilePrefab : GameObject
    + dots : GameObject[]
    + destroyEffect : GameObject
    + boardLayout : TileType[]
    - blankSpaces : bool[,]
    - breakableTiles : Backgroundtile[,]
    + allDots : GameObject[,]
    + currentDot : Dot
    - findMatches : FindMatches
    - scoreManager : ScoreManager
    - soundManager : SoundManager
    + basePieceVal : int = 10
    - streakValue : int = 1
    + refillDelay : float = 0.5f
    + scoreGoals : int[]
    - Start() : void
    + GenerateBlankSpaces() : void
    + GenerateBreakableTiles() : void
    - SetUp() : void
    - MatchesAt(column:int, row:int, piece:GameObject) : bool
    - ColumnOrRow() : bool
    - CheckToMakeBombs() : void
    - DestroyMatchesAt(column:int, row:int) : void
    + DestroyMatches() : void
    - DecreaseRowCo2() : IEnumerator
    - RefillBoard() : void
    - MatchesOnBoard() : bool
    - FillBoardCo() : IEnumerator
    - SwitchPieces(column:int, row:int, direction:Vector2Int) : void
    - CheckForMatches() : bool
    + SwitchAndCheck(column:int, row:int, direction:Vector2Int) : bool
    - IsDeadlocked() : bool
    - ShuffleBoard() : IEnumerator
}
MonoBehaviour <|-- Board
@enduml
