<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="1293px" preserveAspectRatio="none" style="width:666px;height:1293px;background:#FFFFFF;" version="1.1" viewBox="0 0 666 1293" width="666px" zoomAndPan="magnify"><defs/><g><!--MD5=[552aa3c4729b92293c1c45102896c20f]
class Backgroundtile--><g id="elem_Backgroundtile"><rect codeLine="2" fill="#F1F1F1" height="200.5433" id="Backgroundtile" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="243" x="310.5" y="7"/><ellipse cx="376.75" cy="23" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M376.2188,29.9219 Q374.4688,29.9219 373.3281,29.1875 Q372.2031,28.4375 371.6406,27.0938 Q371.0938,25.7344 371.0938,23.9375 Q371.0938,21.9063 371.75,20.4531 Q372.4063,19 373.6875,18.2188 Q374.9688,17.4375 376.8438,17.4375 Q377.7344,17.4375 378.4063,17.625 Q379.0781,17.7969 379.7656,18.1406 L378.9531,20.1563 Q378.3281,19.8438 377.7813,19.7188 Q377.25,19.5938 376.7656,19.5938 Q375.5938,19.5938 374.8906,20.125 Q374.1875,20.6563 373.8906,21.6094 Q373.5938,22.5625 373.5938,23.8281 Q373.5938,25.8438 374.3125,26.8125 Q375.0313,27.7656 376.625,27.7656 Q377.2188,27.7656 377.8438,27.6094 Q378.4688,27.4531 379.2969,27.0781 L379.2969,29.2969 Q378.5625,29.6094 377.7656,29.7656 Q376.9844,29.9219 376.2188,29.9219 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="397.25" y="28.432">Backgroundtile</text><line style="stroke:#181818;stroke-width:0.5;" x1="311.5" x2="552.5" y1="39" y2="39"/><ellipse cx="321.5" cy="54.034" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="89" x="330.5" y="57.9659">hitPoints : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="318.5" y="70.1019"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="217" x="330.5" y="77.0339">spriteRenderer : SpriteRenderer</text><ellipse cx="321.5" cy="92.1698" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="130" x="330.5" y="96.1018">breakSprite : Sprite</text><line style="stroke:#181818;stroke-width:0.5;" x1="311.5" x2="552.5" y1="104.2038" y2="104.2038"/><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="318.5" y="116.2377"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="80" x="330.5" y="123.1697">Start() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="318.5" y="135.3056"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="97" x="330.5" y="142.2376">Update() : void</text><ellipse cx="321.5" cy="157.3735" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="212" x="330.5" y="161.3055">TakeDamage(damage:int) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="318.5" y="173.4415"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="157" x="330.5" y="180.3734">MakeBreakColor() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="318.5" y="192.5094"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="162" x="330.5" y="199.4414">MakeBreakSprite() : void</text></g><!--MD5=[83b3cf3d23d77c6f1e1b5291a241bc2a]
class MonoBehaviour--><g id="elem_MonoBehaviour"><rect fill="#F1F1F1" height="48" id="MonoBehaviour" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="138" x="7" y="344.27"/><ellipse cx="22" cy="360.27" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M21.4688,367.1919 Q19.7188,367.1919 18.5781,366.4575 Q17.4531,365.7075 16.8906,364.3637 Q16.3438,363.0044 16.3438,361.2075 Q16.3438,359.1762 17,357.7231 Q17.6563,356.27 18.9375,355.4887 Q20.2188,354.7075 22.0938,354.7075 Q22.9844,354.7075 23.6563,354.895 Q24.3281,355.0669 25.0156,355.4106 L24.2031,357.4262 Q23.5781,357.1137 23.0313,356.9887 Q22.5,356.8637 22.0156,356.8637 Q20.8438,356.8637 20.1406,357.395 Q19.4375,357.9262 19.1406,358.8794 Q18.8438,359.8325 18.8438,361.0981 Q18.8438,363.1137 19.5625,364.0825 Q20.2813,365.0356 21.875,365.0356 Q22.4688,365.0356 23.0938,364.8794 Q23.7188,364.7231 24.5469,364.3481 L24.5469,366.5669 Q23.8125,366.8794 23.0156,367.0356 Q22.2344,367.1919 21.4688,367.1919 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="106" x="36" y="365.702">MonoBehaviour</text><line style="stroke:#181818;stroke-width:0.5;" x1="8" x2="144" y1="376.27" y2="376.27"/><line style="stroke:#181818;stroke-width:0.5;" x1="8" x2="144" y1="384.27" y2="384.27"/></g><!--MD5=[48e88c162c5505361c629eb6ff3812a8]
class GameState--><g id="elem_GameState"><rect codeLine="13" fill="#F1F1F1" height="86.1358" id="GameState" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="105" x="23.5" y="1060.2"/><ellipse cx="38.5" cy="1076.2" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M34.8594,1082.7 L34.8594,1070.5594 L42.5156,1070.5594 L42.5156,1072.6844 L37.2344,1072.6844 L37.2344,1075.3406 L42.25,1075.3406 L42.25,1077.4656 L37.2344,1077.4656 L37.2344,1080.575 L42.5156,1080.575 L42.5156,1082.7 L34.8594,1082.7 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="73" x="52.5" y="1081.632">GameState</text><line style="stroke:#181818;stroke-width:0.5;" x1="24.5" x2="127.5" y1="1092.2" y2="1092.2"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="32" x="29.5" y="1111.1659">wait,</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="40" x="29.5" y="1130.2339">move,</text><line style="stroke:#181818;stroke-width:0.5;" x1="24.5" x2="127.5" y1="1138.3358" y2="1138.3358"/></g><!--MD5=[b4ae9d073589224ef254da2d940e9e84]
class TileKind--><g id="elem_TileKind"><rect codeLine="17" fill="#F1F1F1" height="105.2038" id="TileKind" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="87" x="32.5" y="1181.67"/><ellipse cx="47.5" cy="1197.67" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M43.8594,1204.17 L43.8594,1192.0294 L51.5156,1192.0294 L51.5156,1194.1544 L46.2344,1194.1544 L46.2344,1196.8106 L51.25,1196.8106 L51.25,1198.9356 L46.2344,1198.9356 L46.2344,1202.045 L51.5156,1202.045 L51.5156,1204.17 L43.8594,1204.17 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="55" x="61.5" y="1203.102">TileKind</text><line style="stroke:#181818;stroke-width:0.5;" x1="33.5" x2="118.5" y1="1213.67" y2="1213.67"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="71" x="38.5" y="1232.6359">Breakable,</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="41" x="38.5" y="1251.7039">Blank,</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="54" x="38.5" y="1270.7718">Normal,</text><line style="stroke:#181818;stroke-width:0.5;" x1="33.5" x2="118.5" y1="1278.8738" y2="1278.8738"/></g><!--MD5=[67dc9d447ac5dbb625e3d503755a5c3a]
class TileType--><g id="elem_TileType"><rect codeLine="22" fill="#F1F1F1" height="105.2038" id="TileType" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="145" x="359.5" y="1050.67"/><ellipse cx="400.15" cy="1066.67" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M399.6188,1073.5919 Q397.8688,1073.5919 396.7281,1072.8575 Q395.6031,1072.1075 395.0406,1070.7637 Q394.4938,1069.4044 394.4938,1067.6075 Q394.4938,1065.5762 395.15,1064.1231 Q395.8063,1062.67 397.0875,1061.8887 Q398.3688,1061.1075 400.2438,1061.1075 Q401.1344,1061.1075 401.8063,1061.295 Q402.4781,1061.4669 403.1656,1061.8106 L402.3531,1063.8262 Q401.7281,1063.5137 401.1813,1063.3887 Q400.65,1063.2637 400.1656,1063.2637 Q398.9938,1063.2637 398.2906,1063.795 Q397.5875,1064.3262 397.2906,1065.2794 Q396.9938,1066.2325 396.9938,1067.4981 Q396.9938,1069.5137 397.7125,1070.4825 Q398.4313,1071.4356 400.025,1071.4356 Q400.6188,1071.4356 401.2438,1071.2794 Q401.8688,1071.1231 402.6969,1070.7481 L402.6969,1072.9669 Q401.9625,1073.2794 401.1656,1073.4356 Q400.3844,1073.5919 399.6188,1073.5919 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="56" x="419.85" y="1072.102">TileType</text><line style="stroke:#181818;stroke-width:0.5;" x1="360.5" x2="503.5" y1="1082.67" y2="1082.67"/><ellipse cx="370.5" cy="1097.704" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="37" x="379.5" y="1101.6359">x : int</text><ellipse cx="370.5" cy="1116.7719" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="37" x="379.5" y="1120.7039">y : int</text><ellipse cx="370.5" cy="1135.8398" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="119" x="379.5" y="1139.7718">tileKind : TileKind</text><line style="stroke:#181818;stroke-width:0.5;" x1="360.5" x2="503.5" y1="1147.8738" y2="1147.8738"/></g><!--MD5=[9563755d011c5cec7ec66dc53565a59e]
class Board--><g id="elem_Board"><rect codeLine="27" fill="#F1F1F1" height="772.5808" id="Board" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="454" x="205" y="242.98"/><ellipse cx="407.75" cy="258.98" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M407.2188,265.9019 Q405.4688,265.9019 404.3281,265.1675 Q403.2031,264.4175 402.6406,263.0737 Q402.0938,261.7144 402.0938,259.9175 Q402.0938,257.8862 402.75,256.4331 Q403.4063,254.98 404.6875,254.1987 Q405.9688,253.4175 407.8438,253.4175 Q408.7344,253.4175 409.4063,253.605 Q410.0781,253.7769 410.7656,254.1206 L409.9531,256.1362 Q409.3281,255.8237 408.7813,255.6987 Q408.25,255.5737 407.7656,255.5737 Q406.5938,255.5737 405.8906,256.105 Q405.1875,256.6362 404.8906,257.5894 Q404.5938,258.5425 404.5938,259.8081 Q404.5938,261.8237 405.3125,262.7925 Q406.0313,263.7456 407.625,263.7456 Q408.2188,263.7456 408.8438,263.5894 Q409.4688,263.4331 410.2969,263.0581 L410.2969,265.2769 Q409.5625,265.5894 408.7656,265.7456 Q407.9844,265.9019 407.2188,265.9019 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="40" x="428.25" y="264.412">Board</text><line style="stroke:#181818;stroke-width:0.5;" x1="206" x2="658" y1="274.98" y2="274.98"/><ellipse cx="216" cy="290.014" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="169" x="225" y="293.9459">currentState : GameState</text><ellipse cx="216" cy="309.0819" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="68" x="225" y="313.0139">width : int</text><ellipse cx="216" cy="328.1498" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="225" y="332.0818">height : int</text><ellipse cx="216" cy="347.2177" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="69" x="225" y="351.1497">offSet : int</text><ellipse cx="216" cy="366.2856" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="160" x="225" y="370.2176">tilePrefab : GameObject</text><ellipse cx="216" cy="385.3535" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="230" x="225" y="389.2855">breakableTilePrefab : GameObject</text><ellipse cx="216" cy="404.4215" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="134" x="225" y="408.3534">dots : GameObject[]</text><ellipse cx="216" cy="423.4894" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="183" x="225" y="427.4214">destroyEffect : GameObject</text><ellipse cx="216" cy="442.5573" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="162" x="225" y="446.4893">boardLayout : TileType[]</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="213" y="458.6252"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="139" x="225" y="465.5572">blankSpaces : bool[,]</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="213" y="477.6931"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="226" x="225" y="484.6251">breakableTiles : Backgroundtile[,]</text><ellipse cx="216" cy="499.761" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="155" x="225" y="503.693">allDots : GameObject[,]</text><ellipse cx="216" cy="518.829" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="108" x="225" y="522.7609">currentDot : Dot</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="213" y="534.8969"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="182" x="225" y="541.8289">findMatches : FindMatches</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="213" y="553.9648"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="207" x="225" y="560.8968">scoreManager : ScoreManager</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="213" y="573.0327"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="219" x="225" y="579.9647">soundManager : SoundManager</text><ellipse cx="216" cy="595.1006" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="149" x="225" y="599.0326">basePieceVal : int = 10</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="213" y="611.1685"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="225" y="618.1005">streakValue : int = 1</text><ellipse cx="216" cy="633.2365" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="151" x="225" y="637.1684">refillDelay : float = 0.5f</text><ellipse cx="216" cy="652.3044" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="113" x="225" y="656.2364">scoreGoals : int[]</text><line style="stroke:#181818;stroke-width:0.5;" x1="206" x2="658" y1="664.3383" y2="664.3383"/><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="213" y="676.3723"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="80" x="225" y="683.3043">Start() : void</text><ellipse cx="216" cy="698.4402" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="194" x="225" y="702.3722">GenerateBlankSpaces() : void</text><ellipse cx="216" cy="717.5081" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="208" x="225" y="721.4401">GenerateBreakableTiles() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="213" y="733.576"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="88" x="225" y="740.508">SetUp() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="213" y="752.644"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="378" x="225" y="759.5759">MatchesAt(column:int, row:int, piece:GameObject) : bool</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="213" y="771.7119"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="146" x="225" y="778.6439">ColumnOrRow() : bool</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="213" y="790.7798"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="186" x="225" y="797.7118">CheckToMakeBombs() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="213" y="809.8477"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="297" x="225" y="816.7797">DestroyMatchesAt(column:int, row:int) : void</text><ellipse cx="216" cy="831.9156" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="156" x="225" y="835.8476">DestroyMatches() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="213" y="847.9835"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="220" x="225" y="854.9155">DecreaseRowCo2() : IEnumerator</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="213" y="867.0515"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="122" x="225" y="873.9834">RefillBoard() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="213" y="886.1194"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="166" x="225" y="893.0514">MatchesOnBoard() : bool</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="213" y="905.1873"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="181" x="225" y="912.1193">FillBoardCo() : IEnumerator</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="213" y="924.2552"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="402" x="225" y="931.1872">SwitchPieces(column:int, row:int, direction:Vector2Int) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="213" y="943.3231"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="167" x="225" y="950.2551">CheckForMatches() : bool</text><ellipse cx="216" cy="965.391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="428" x="225" y="969.323">SwitchAndCheck(column:int, row:int, direction:Vector2Int) : bool</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="213" y="981.459"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="139" x="225" y="988.3909">IsDeadlocked() : bool</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="213" y="1000.5269"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="193" x="225" y="1007.4589">ShuffleBoard() : IEnumerator</text></g><!--MD5=[751b67d46bd37f27f961bc2daa454d6d]
reverse link MonoBehaviour to Backgroundtile--><g id="link_MonoBehaviour_Backgroundtile"><path codeLine="12" d="M107.21,327.14 C131.26,296.4 167.07,254.76 205,225.27 C236.88,200.47 274.75,178.36 310.29,160.17 " fill="none" id="MonoBehaviour-backto-Backgroundtile" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="113.11,330.96,95.41,342.61,101.98,322.47,113.11,330.96" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[6bab5da86d9a5c61d1aca95883c28654]
reverse link MonoBehaviour to Board--><g id="link_MonoBehaviour_Board"><path codeLine="67" d="M127.23,405.3 C148.92,421.29 175.95,441.22 204.89,462.56 " fill="none" id="MonoBehaviour-backto-Board" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="123.15,410.99,111.2,393.49,131.46,399.72,123.15,410.99" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[d34b90f9dea8a99501a3502326100742]
@startuml
left to right direction
class Backgroundtile {
    + hitPoints : int
    - spriteRenderer : SpriteRenderer
    + breakSprite : Sprite
    - Start() : void
    - Update() : void
    + TakeDamage(damage:int) : void
    - MakeBreakColor() : void
    - MakeBreakSprite() : void
}
MonoBehaviour <|- - Backgroundtile
enum GameState {
    wait,
    move,
}
enum TileKind {
    Breakable,
    Blank,
    Normal,
}
class TileType {
    + x : int
    + y : int
    + tileKind : TileKind
}
class Board {
    + currentState : GameState
    + width : int
    + height : int
    + offSet : int
    + tilePrefab : GameObject
    + breakableTilePrefab : GameObject
    + dots : GameObject[]
    + destroyEffect : GameObject
    + boardLayout : TileType[]
    - blankSpaces : bool[,]
    - breakableTiles : Backgroundtile[,]
    + allDots : GameObject[,]
    + currentDot : Dot
    - findMatches : FindMatches
    - scoreManager : ScoreManager
    - soundManager : SoundManager
    + basePieceVal : int = 10
    - streakValue : int = 1
    + refillDelay : float = 0.5f
    + scoreGoals : int[]
    - Start() : void
    + GenerateBlankSpaces() : void
    + GenerateBreakableTiles() : void
    - SetUp() : void
    - MatchesAt(column:int, row:int, piece:GameObject) : bool
    - ColumnOrRow() : bool
    - CheckToMakeBombs() : void
    - DestroyMatchesAt(column:int, row:int) : void
    + DestroyMatches() : void
    - DecreaseRowCo2() : IEnumerator
    - RefillBoard() : void
    - MatchesOnBoard() : bool
    - FillBoardCo() : IEnumerator
    - SwitchPieces(column:int, row:int, direction:Vector2Int) : void
    - CheckForMatches() : bool
    + SwitchAndCheck(column:int, row:int, direction:Vector2Int) : bool
    - IsDeadlocked() : bool
    - ShuffleBoard() : IEnumerator
}
MonoBehaviour <|- - Board

newpage
left to right direction
class CameraScalar {
    - board : Board
    + cameraOffset : float
    + padding : float = 2
    + yOffset : float = 1
    - Start() : void
    - RepositionCamera(x:float, y:float) : void
    - Update() : void
}
MonoBehaviour <|- - CameraScalar
class Dot {
    + column : int
    + row : int
    + previousColumn : int
    + previousRow : int
    + targetX : int
    + targetY : int
    + isMatched : bool = false
    - hintManager : HintManager
    - findMatches : FindMatches
    - board : Board
    + otherDot : GameObject
    - firstTouchPosition : Vector2
    - finalTouchPosition : Vector2
    - tempPosition : Vector2
    + swipeAngle : float = 0
    + swipeResist : float = 1f
    + isColorBomb : bool
    + isColumnBomb : bool
    + isRowBomb : bool
    + isAdjacentBomb : bool
    + adjacentMarker : GameObject
    + rowArrow : GameObject
    + columnArrow : GameObject
    + colorBomb : GameObject
    - Start() : void
    - OnMouseOver() : void
    - Update() : void
    + CheckMoveCo() : IEnumerator
    - OnMouseDown() : void
    - OnMouseUp() : void
    - CalculateAngle() : void
    - MovePiecesEngine(direction:Vector2Int) : void
    - MovePieces() : void
    + MakeRowBomb() : void
    + MakeColumnBomb() : void
    + MakeColorBomb() : void
    + MakeAdjacentBomb() : void
}
MonoBehaviour <|- - Dot
class FadePanelController {
    + panelAnim : Animator
    + gameInfoAnim : Animator
    + OK() : void
}
MonoBehaviour <|- - FadePanelController
class FindMatches {
    - board : Board
    + currentMatches : List<GameObject>
    - Start() : void
    + FindAllMatches() : void
    - IsAdjacentBomb(dot1:Dot, dot2:Dot, dot3:Dot) : List<GameObject>
    - IsRowBomb(dot1:Dot, dot2:Dot, dot3:Dot) : List<GameObject>
    - IsColumnBomb(dot1:Dot, dot2:Dot, dot3:Dot) : List<GameObject>
    - AddToListAndMatch(dot:GameObject) : void
    - GetNearbyPieces(dot1:GameObject, dot2:GameObject, dot3:GameObject) : void
    - FindAllMatchesCo() : IEnumerator
    + MatchPiecesOfColor(color:string) : void
    - GetAdjacentPieces(column:int, row:int) : List<GameObject>
    - GetColumnPieces(column:int) : List<GameObject>
    - GetRowPieces(row:int) : List<GameObject>
    + CheckBombs() : void
}
MonoBehaviour <|- - FindMatches
class BlankGoal {
    + numberNeeded : int
    + numberCollected : int
    + goalSprite : Sprite
    + matchValue : string
}

newpage
left to right direction
class GoalManager {
    + levelGoals : BlankGoal[]
    + goalPrefab : GameObject
    + goalIntroParent : GameObject
    + goalGameParent : GameObject
    - Start() : void
    - SetupIntroGoals() : void
    - Update() : void
}
MonoBehaviour <|- - GoalManager
class GoalPanel {
    + thisImage : Image
    + thisSprite : Sprite
    + thisText : TextMeshProUGUI
    + thisString : string
    - Start() : void
    - Setup() : void
    - Update() : void
}
MonoBehaviour <|- - GoalPanel
class HintManager {
    - board : Board
    + hintDelay : float
    - hintDelaySeconds : float
    + hintParticle : GameObject
    + currentHint : GameObject
    - Start() : void
    - Update() : void
    - FindAllMatches() : List<GameObject>
    - RandomPickOne() : GameObject
    - MarkHint() : void
    + DestroyHint() : void
}
MonoBehaviour <|- - HintManager
class ScoreManager {
    - board : Board
    + scoreText : TextMeshProUGUI
    + score : int
    + scoreBar : Image
    - Start() : void
    - Update() : void
    + IncreaseScore(amountToIncrease:int) : void
    - LoadBar() : void
}
MonoBehaviour <|- - ScoreManager
class SoundManager {
    + destroyNoise : AudioSource[]
    + backgroundMusic : AudioSource
    + introSection : AudioSource
    - introPlayed : bool = false
    + Start() : void
    + Update() : void
    - PlayBackground() : void
    - CheckPlayIntroToPlayBG() : void
    - PlayIntro() : void
    + PlayRandomDestroyNoise() : void
}
MonoBehaviour <|- - SoundManager
@enduml

PlantUML version 1.2022.7(Tue Aug 23 00:01:30 ICT 2022)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>